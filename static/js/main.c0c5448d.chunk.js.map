{"version":3,"sources":["index.js"],"names":["App","props","state","firstname","email","errors","handleInputChange","bind","handleSubmit","key","this","indexOf","event","target","name","value","obj","setState","preventDefault","push","test","String","toLowerCase","length","alert","className","htmlFor","autoComplete","hasError","onChange","onClick","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sNAQMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAW,GACXC,MAAO,GACPC,OAAQ,IAGV,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,E,4CAanB,SAASE,GACP,OAA2C,IAApCC,KAAKR,MAAMG,OAAOM,QAAQF,K,+BAGnC,SAAkBG,GAChB,IAAIH,EAAMG,EAAMC,OAAOC,KACnBC,EAAQH,EAAMC,OAAOE,MACrBC,EAAM,GACVA,EAAIP,GAAOM,EACXL,KAAKO,SAASD,K,0BAGhB,SAAaJ,GACXA,EAAMM,iBAGN,IAAIb,EAAS,GAGgB,KAAzBK,KAAKR,MAAMC,WACbE,EAAOc,KAAK,aAed,GAXmB,UACSC,KAAKC,OAAOX,KAAKR,MAAME,OAAOkB,gBAGxDjB,EAAOc,KAAK,SAGdT,KAAKO,SAAS,CACZZ,OAAQA,IAGNA,EAAOkB,OAAS,EAClB,OAAO,EAEPC,MAAM,mC,oBAIV,WACE,OAKE,cAJA,CAIA,QAAMC,UAAU,MAAhB,UACE,sBAAKA,UAAU,WAAf,UACE,uBAAOC,QAAQ,YAAf,wBACA,uBACEC,aAAa,MACbF,UACEf,KAAKkB,SAAS,aACV,0BACA,eAENd,KAAK,YACLC,MAAOL,KAAKR,MAAMC,UAClB0B,SAAUnB,KAAKJ,oBAEjB,qBACEmB,UACEf,KAAKkB,SAAS,aAAe,kBAAoB,SAFrD,qCASF,sBAAKH,UAAU,WAAf,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBACEC,aAAa,MACbF,UACEf,KAAKkB,SAAS,SACV,0BACA,eAENd,KAAK,QACLC,MAAOL,KAAKR,MAAME,MAClByB,SAAUnB,KAAKJ,oBAEjB,qBACEmB,UAAWf,KAAKkB,SAAS,SAAW,kBAAoB,SAD1D,4CAOF,qBAAKH,UAAU,qBAAf,SACE,wBAAQA,UAAU,kBAAkBK,QAASpB,KAAKF,aAAlD,6B,GA1GQuB,IAAMC,WAoHlBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACrC,EAAD,IAASiC,K","file":"static/js/main.c0c5448d.chunk.js","sourcesContent":["\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap-css-only\";\r\n\r\nimport \"./styles.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstname: \"\",\r\n      email: \"\",\r\n      errors: []\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  hasError(key) {\r\n    return this.state.errors.indexOf(key) !== -1;\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    var key = event.target.name;\r\n    var value = event.target.value;\r\n    var obj = {};\r\n    obj[key] = value;\r\n    this.setState(obj);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    //VALIDATE\r\n    var errors = [];\r\n\r\n    //firstname\r\n    if (this.state.firstname === \"\") {\r\n      errors.push(\"firstname\");\r\n    }\r\n\r\n    //email\r\n    const expression = /\\S+@\\S+/;\r\n    var validEmail = expression.test(String(this.state.email).toLowerCase());\r\n\r\n    if (!validEmail) {\r\n      errors.push(\"email\");\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors\r\n    });\r\n\r\n    if (errors.length > 0) {\r\n      return false;\r\n    } else {\r\n      alert(\"everything good. submit form!\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div className = \"wrapper\" >\r\n      //   <div className = \"leftbar\">\r\n      //     <p>sdflkjadlfaj</p>\r\n        // </div>\r\n      <form className=\"row\">\r\n        <div className=\"col-md-3\">\r\n          <label htmlFor=\"firstname\">First Name</label>\r\n          <input\r\n            autoComplete=\"off\"\r\n            className={\r\n              this.hasError(\"firstname\")\r\n                ? \"form-control is-invalid\"\r\n                : \"form-control\"\r\n            }\r\n            name=\"firstname\"\r\n            value={this.state.firstname}\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <div\r\n            className={\r\n              this.hasError(\"firstname\") ? \"inline-errormsg\" : \"hidden\"\r\n            }\r\n          >\r\n            Please enter a value\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-3\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            autoComplete=\"off\"\r\n            className={\r\n              this.hasError(\"email\")\r\n                ? \"form-control is-invalid\"\r\n                : \"form-control\"\r\n            }\r\n            name=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <div\r\n            className={this.hasError(\"email\") ? \"inline-errormsg\" : \"hidden\"}\r\n          >\r\n            Email is invalid or missing\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-lg-0  padd-top\">\r\n          <button className=\"btn btn-success\" onClick={this.handleSubmit}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './index.css';\r\n// import App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// // If you want to start measuring performance in your app, pass a function\r\n// // to log results (for example: reportWebVitals(console.log))\r\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}